substitutions:

    friendly_name: "Bookcase"
    reboot_timeout_wifi: 900s
    reboot_timeout_api: 1800s 
  
  esphome:
    name: bookshelfsensors
  
  esp8266:
    board: d1_mini
  
  # Enable logging
  logger:
  
  # Enable Home Assistant API
  api:
  
  ota:
    password: "129b8fc2b0799621beb0b3f597d623d6"
  
  wifi:
    ssid: !secret wifi_ssid
    password: !secret wifi_password
    manual_ip:
      static_ip: 192.168.2.13
      gateway: 192.168.2.254
      subnet: 255.255.255.0
    ap:
      ssid: "${friendly_name} Hotspot"
      password: !secret wifi_password
  captive_portal:
  
  web_server:
    port: 80
    
  mqtt:
    broker: 192.168.2.1
    username: !secret mqtt_user
    password: !secret mqtt_password
  
  
  remote_receiver:
     pin:
      number: D1
     dump: all
  
  remote_transmitter:
     pin: D2 
     carrier_duty_percent: 50%
      
  binary_sensor:
    
    - platform: gpio
      pin: D3
      name: "Bedroom Motion Sensor"
      device_class: motion
      
    - platform: gpio
      pin: D6
      name: "${friendly_name} Motion Sensor"
      device_class: motion   
  
    - platform: status
      name: Bookcase Wifi
      id: wifi_status
      
  sensor:
   
    - platform: dht
      model: DHT22
      pin: D4
      temperature:
        name: "${friendly_name} Temperature"
        filters:
        - offset: -3.6
      humidity:
        name: "${friendly_name} Humidity"
      update_interval: 60s
      
    - platform: uptime
      name: ${friendly_name} Uptime
      id: uptime_sensor
      update_interval: 60s
      on_raw_value:
        then:
          - text_sensor.template.publish:
              id: uptime_secs
              state: !lambda |-
                int seconds = round(id(uptime_sensor).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? to_string(days) + "d " : "") +
                  (hours ? to_string(hours) + "h " : "") +
                  (minutes ? to_string(minutes) + "m " : "") +
                  (to_string(seconds) + "s")
                ).c_str();   
                
  text_sensor:

    - platform: version
      name: ${friendly_name} Version
  
    - platform: template
      name: ${friendly_name} Uptime in seconds
      id: uptime_secs
      icon: mdi:clock-start 

  switch:

    - platform: restart
      name: ${friendly_name} Restart
  
  button:

    - platform: template
      name: "TV Turn Off"
      on_press:
        remote_transmitter.transmit_rc5:
          address: 0x00
          command: 0x0C
  
    - platform: template
      name: "TV Mute"
      on_press:
        remote_transmitter.transmit_rc5:
          address: 0x00
          command: 0x0D
  
    - platform: template
      name: "TV Volume Up"
      on_press:
        remote_transmitter.transmit_rc5:
          address: 0x00
          command: 0x15
          repeat:
           times: 2
           wait_time: 50ms
  
    - platform: template
      name: "TV Volume Down"
      on_press:
        remote_transmitter.transmit_rc5:
          address: 0x00
          command: 0x14
  
    - platform: template
      name: "TV Volume OK"
      on_press:
        remote_transmitter.transmit_rc5:
          address: 0x00
          command: 0x26